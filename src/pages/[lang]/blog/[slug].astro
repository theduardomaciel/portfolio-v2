---
import BaseLayout from "@/layouts/BaseLayout.astro";
import "@/styles/post.css";

import Icon from "@/components/Icon.astro";

// Components
import Footer from "@/components/Footer/Footer.astro";
import Header from "@/components/Header/Header.astro";
import PostPreview from "@/components/Post/PostPreview.astro";

import LikeButton from "@/components/Post/Buttons/LikeButton";
import ShareButton from "@/components/Post/Buttons/ShareButton";
import BookmarkButton from "@/components/Post/Buttons/BookmarkButton";

import ArticleSchema from "@/components/seo/ArticleSchema.astro";

// Data
import { getCollection } from "astro:content";
import { getGuestFromId } from "@/api/guest";

export const prerender = true;

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
	const blogEntries = await getCollection("blog");

	return blogEntries.map((post) => ({
		params: {
			slug: post.slug.split("/")[0],
			lang: post.slug.split("/")[1],
		},
		props: { post },
	}));
}

// 2. For your template, you can get the entry directly from the prop
const { post } = Astro.props;
const { Content } = await post.render();

if (!post) {
	return Astro.redirect("/404");
}

const tags = post.data.tags ?? [];

const guestId = Astro.cookies.get("guest.id")?.value;
const guest = await getGuestFromId(guestId as string);

const likedPostsSlugs = guest?.likedPosts.map(
	(likedPost: PostStats) => likedPost.slug,
);
const hasLiked = likedPostsSlugs?.includes(post.slug);

const markedPostsSlugs = guest?.readingList.map(
	(markedPost: PostStats) => markedPost.slug,
);
const hasMarked = markedPostsSlugs?.includes(post.slug);

import { useTranslations } from "@/i18n/utils";
import type { translations } from "@/i18n/utils";
import type { Guest, Post as PostStats } from "@prisma/client";

import { getPostStatsBySlug } from "@/api/post/[slug]";

const { lang, slug } = Astro.params;
const t = useTranslations(lang as keyof typeof translations).blog;

const postStats = await getPostStatsBySlug(slug);

const publishedAt = new Date(post.data.publishedAt);
const formattedDate = publishedAt.toLocaleDateString(lang, {
	year: "numeric",
	month: "2-digit",
	day: "2-digit",
});

const splittedBody = post.body.slice(0, 160);

const seo = {
	title: post.data.title,
	description: splittedBody,
	image: post.data.cover?.src ?? undefined,
};
---

<script>
    const toggleButton = document.getElementById(
        "toggleAside"
    ) as HTMLButtonElement;

    function toggle() {
        const post = document.getElementById("post") as HTMLDivElement;
        post.classList.toggle("collapsed");
    }

    toggleButton.addEventListener("click", toggle);
</script>

<BaseLayout seo={seo}>
    <Fragment>
        <ArticleSchema {...seo} />
    </Fragment>
    <Header isStatic={true} />
    <main id="post" class="post">
        <nav>
            <div class="subtitle">
                <p style="font-size: 3.6rem;">{t.title}</p>
                <div></div>
            </div>
            <a href={`/${lang}/blog`} class="back">
                <Icon
                    name="left_arrow"
                    aria-label={"Back arrow"}
                />
                {t.return_button}
            </a>
        </nav>
        <!-- Content-->
        <div class="holder">
            <div class="content">
                <a href={`/${lang}/blog`} class="back desktop">
                    <Icon
                        name="left_arrow"
                        aria-label={"Back arrow"}
                    />
                    {t.return_button}
                </a>
                <header>
                    <section class="info">
                        <div class="iconHolder icon">
                            <Icon
                                width={16}
                                name="calendar"
                                aria-label={"Calendar icon"}
                            />
                            {formattedDate}
                        </div>
                        <div class="divisor"></div>
                        <div class="iconHolder">
                            <Icon
                                width={16}
                                name="view"
                                aria-label={"Eye icon"}
                            />
                            {postStats?.views || "--"}
                        </div>
                        <div class="divisor"></div>
                        <div class="iconHolder">
                            <Icon
                                width={16}
                                name="like"
                                aria-label={"Like (heart) icon"}
                            />
                            {postStats?.likedBy.length || "--"}
                        </div>
                    </section>
                    <h1>{post.data.title}</h1>
                    <ul class="tags">
                        {
                            tags.map((tag: string) => (
                                <li>
                                    <a href={`/blog/category/${tag}`} data-astro-prefetch>
                                        #{tag}
                                    </a>
                                </li>
                            ))
                        }
                    </ul>
                </header>
                <article class="post">
                    <Content />
                </article>
            </div>
            <!-- Right Column -->
            <aside>
               <div class="test">
                <div class={`buttons ${!guestId ? "centralized" : ""}`}>
                    <button id="toggleAside" class="toggle">
                        <Icon
                            width={16}
                            class={"chevron"}
                            fill={"var(--secondary-01)"}
                            name="chevron_left"
                            aria-label={"Chevron icon"}
                        />
                    </button>
                    <div class={`container shareIntegrated`}>
                        {
                            guestId && (
                                <div class="row">
                                    <LikeButton
                                        client:load
                                        post={post}
                                        guest={guest as Guest}
                                        initialValue={hasLiked}
                                    />
                                    <BookmarkButton
                                        client:load
                                        post={post}
                                        guest={guest as Guest}
                                        initialValue={hasMarked}
                                    />
                                </div>
                            )
                        }
                        <ShareButton client:load label={t.share} post={post} />
                    </div>
                </div>
                {
                    guest && guest.readingList.length > 0 ? (
                        <div class="container">
                            <h6>{t.reading_list.title}</h6>
                            {post && post.data.tags && (
                                <PostPreview
                                    post={post}
                                    tags={tags}
                                    isMinimal
                                />
                            )}
                        </div>
                    ) : (
                        <div class="container" style="text-align: center;">
                            <h6>{t.reading_list.empty.title}</h6>
                            <p>{t.reading_list.empty.subtitle}</p>
                        </div>
                    )
                }
               </div>
            </aside>
        </div>
        <!-- Mobile Buttons -->
        <div class="container share">
            <div class="row">
                {
                    guestId && guest && (
                        <Fragment>
                            <LikeButton
                                initialValue={hasLiked}
                                client:load
                                post={post}
                                guest={guest}
                            />
                            <BookmarkButton
                                initialValue={hasMarked}
                                client:load
                                post={post}
                                guest={guest}
                            />
                        </Fragment>
                    )
                }
                <ShareButton client:load label={t.share} post={post} />
            </div>
        </div>
    </main>
    <Footer />
</BaseLayout>
