---
import Layout from "@/layouts/BaseLayout.astro";

import Header from "@/components/Header/Header.astro";
import Footer from "@/components/Footer/Footer.astro";

import Home from "@/components/Landing/Sections/Home/Home.astro";
import Projects from "@/components/Landing/Sections/Projects/Projects";
import Experiences from "@/components/Landing/Sections/Experiences/Experiences.astro";
import Contact from "@/components/Landing/Sections/Contact/Contact.astro";

import projects_en from "@/public/data/projects/projects.json";
import projects_es from "@/public/data/projects/dictionaries/es.json";
import projects_pt from "@/public/data/projects/dictionaries/pt-br.json";

import experiences_en from "@/public/data/experiences/experiences.json";
import experiences_es from "@/public/data/experiences/dictionaries/es.json";
import experiences_pt from "@/public/data/experiences/dictionaries/pt-br.json";

export const prerender = true;

import { defaultLang, translations } from "@/i18n/utils";
import type { Project } from "@/types/project";
import type { Experience } from "@/types/experience";

interface DictionaryProject {
	name?: string;
	description: string;
	technologies?: {
		name: string;
		outro: string;
	}[];
}

export async function getStaticPaths() {
	return Object.keys(translations).map((lang) => ({
		params: { lang },
		props: {
			projects:
				lang === defaultLang
					? projects_en
					: projects_en.map((project) => {
							const { id, description, ...rest } = project;

							const projectsDictionaries = {
								es: projects_es,
								"pt-br": projects_pt,
							};

							const allProjectsDictionary =
								projectsDictionaries[
									lang as keyof typeof projectsDictionaries
								];

							const projectDictionary = allProjectsDictionary[
								id as keyof typeof allProjectsDictionary
							] as DictionaryProject;

							return {
								...rest,
								name: projectDictionary.name || id,
								description:
									projectDictionary.description ||
									description,
								technologies: project.technologies?.map(
									(tech) => {
										return {
											...tech,
											outro: projectDictionary.technologies?.find(
												(t) => t.name === tech.name,
											)?.outro,
										};
									},
								),
							} as Project;
						}),
			experiences: experiences_en.map((experience) => {
				const { id, ...rest } = experience;

				const techsDictionaries = {
					es: experiences_es,
					"pt-br": experiences_pt,
				};

				const dictionary =
					techsDictionaries[lang as keyof typeof techsDictionaries];

				const localization = dictionary
					? dictionary[id as keyof typeof dictionary]
					: undefined;

				return {
					...rest,
					id: localization ? localization.name : id,
				} as Experience;
			}),
		},
	}));
}

const { lang } = Astro.params;
const { projects, experiences } = Astro.props;
---

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let lazyVideos = [].slice.call(document.querySelectorAll("video.lazy"));

        if ("IntersectionObserver" in window) {
            let lazyVideoObserver = new IntersectionObserver(function (
                entries,
                observer
            ) {
                entries.forEach(function (video: any) {
                    if (video.isIntersecting) {
                        for (let source in video.target.children) {
                            let videoSource = video.target.children[
                                source
                            ] as HTMLSourceElement;
                            if (
                                typeof videoSource.tagName === "string" &&
                                videoSource.tagName === "SOURCE"
                            ) {
                                videoSource.src = videoSource.dataset
                                    .src as string;
                            }
                        }

                        video.target.load();
                        video.target.classList.remove("lazy");
                        lazyVideoObserver.unobserve(video.target);
                    }
                });
            });

            lazyVideos.forEach(function (lazyVideo) {
                lazyVideoObserver.observe(lazyVideo);
            });
        }
    });
</script>

<Layout>
    <Header />
    <main>
        <Home />
        <Projects projects={projects} lang={lang} client:load />
        <Experiences experiences={experiences} />
        <Contact />
    </main>
    <Footer />
</Layout>
